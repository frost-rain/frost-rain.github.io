---
layout: post
title: "LeetCode 26.Remove Duplicates from Sorted Array"
description: "LeetCode第二十六题"
tag: "LeetCode 题解"
---

<br />

 **LeetCode 26.删除排序数组中的重复项**
---
---
<p style="text-align:right;font-size:120%">
<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/" target="blank">
原题链接点这
</a>
</p>

## **题目:** 

##### <b style=";color:Indigo">&nbsp;&nbsp;&nbsp; 类型: &nbsp; 数组 &nbsp; 双指针 </b>

<br />

##### &nbsp;&nbsp;&nbsp; 给定一个排序数组，你需要在<b style="color:skyblue">原地删除</b>重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

##### &nbsp;&nbsp;&nbsp; <b style="color:skyblue">不要使用额外的数组空间</b>，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

<br />

## **示例:**

#### 示例1:

>给定数组 nums = [1,1,2], 

>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

>你不需要考虑数组中超出新长度后面的元素。

#### 示例2:

>给定 nums = [0,0,1,1,1,2,2,3,3,4],

>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

>你不需要考虑数组中超出新长度后面的元素。

<br />
  
## **分析:**

题目要求不使用额外的数组空间，所以直接改变原数组;

一个变量作为下标同时记录新数组的长度，另一个变量作为下标遍历整个数组，跳过重复的数字，将数字往数组前面移动，遍历至最后，没有重复数字的数组也就完成了。

<br />

## **题解:**

```C++
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.empty()) return 0;
        int i = 0;
        for (int j = 1; j < nums.size(); ++j){
            if (nums[j] != nums[i]){
                ++i;
                nums[i] = nums[j];
            }
        }
        return i + 1;
    }
};
```
