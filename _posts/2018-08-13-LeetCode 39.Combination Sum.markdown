---
layout: post
title: "LeetCode 39.Combination Sum"
description: "LeetCode第三十九题"
tag: LeetCode 题解
---

<br />

**LeetCode 39.组合总和**
---
---
<p style="text-align:right;font-size:120%">
<a href="https://leetcode-cn.com/problems/combination-sum/description/" target="blank">
原题链接点这
</a>
</p>

## **题目:**

##### <b style=";color:Indigo">&nbsp;&nbsp;&nbsp; 类型: &nbsp; 数组 &nbsp; 回溯法 </b>

<br />

##### &nbsp;&nbsp;&nbsp; 给定一个无重复元素的数组<b style="color:firebrick"> candidates </b>和一个目标数<b style="color:firebrick"> target </b>，找出<b style="color:firebrick"> candidates </b>中所有可以使数字和为<b style="color:firebrick"> target </b>的组合。

##### &nbsp;&nbsp;&nbsp; <b style="color:firebrick"> candidates </b>中的数字可以无限制重复被选取。

##### &nbsp;&nbsp;&nbsp; 说明：

##### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所有数字（包括<b style="color:firebrick"> target </b>）都是正整数。

##### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 解集不能包含重复的组合。

<br />

## **示例:**

#### 示例1:

>输入: candidates = [2,3,6,7], target = 7

>所求解集为:

>[
 
>&nbsp;&nbsp; [7],
 
>&nbsp;&nbsp; [2,2,3]

>]

#### 示例2:

>输入: candidates = [2,3,5], target = 8,

>所求解集为:

>[
 
>&nbsp;&nbsp; [2,2,2,2],
 
>&nbsp;&nbsp; [2,3,3],
 
>&nbsp;&nbsp; [3,5]

>]

<br />

## **分析:**

这道题比较简单，利用回溯算法解题;

题目中要求找出所有等于target的组合，并且数组中的数可以重复，所以可以用递归，将数组中的每一个组合都尝试一遍，找出预期的值;

在递归的函数当中用for循环遍历数组中的每个数，确定一位数之后进行递归再加上一位数。需要在函数的开头判断sum是否大于target，并且当sum等于target时将当前的组合存入result当中;

本题关键在于如何去掉重复的组合。经过观察可以发现，应当在下一次递归中的for循环以上一次递归中的i值开始(例:当i==2 时，下一次递归开始不能够从零开始，而是也要从2开始，这样可以避免有重复的组合，同时两次相等时为了能够让某一数字自加);

对于去重的部分，理解起来有些难度，稍稍用几个数组推一下就可以知道规律了。

<br />

## **题解:**

```C++
class Solution {
public:
    std::vector<std::vector<int>> result;
    std::vector<std::vector<int>> combinationSum(std::vector<int>& candidates, int target) {
        std::vector<int> path;
        traceback(candidates,0,path,target,0);
        return result;
    }
    void traceback(const std::vector<int>& can,int sum,std::vector<int> &path,int &target,int index){
        if(sum > target) return;
        if(sum == target){
            result.push_back(path);
        }
        for(int i = index; i < can.size(); ++i){
            path.push_back(can[i]);
            traceback(can,sum+can[i],path,target,i);
            path.pop_back();
        }
    }
};
```

<br />

## **不足:**

这道题的运行时间很迷，感觉已经简化了，但是还是只击败70+%的提交，如果以后有机会，可以再想想有什么更好的方法没，也有可能是因为以前的测试样例少导致一些提交的运行时间比较短（试过超过100%的提交的算法，跑出来的时间也很弱）。



