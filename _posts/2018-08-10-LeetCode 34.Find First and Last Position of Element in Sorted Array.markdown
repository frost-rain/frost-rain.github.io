---
layout: post
title: "LeetCode 34.Find First and Last Position of Element in Sorted Array"
description: "LeetCode第三十四题"
tag: LeetCode 题解
---

<br />

**LeetCode 34.在排序数组中查找元素的第一个和最后一个位置**
---
---
<p style="text-align:right;font-size:120%">
<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/" target="blank">
原题链接点这
</a>
</p>

## **题目:**

##### <b style=";color:Indigo">&nbsp;&nbsp;&nbsp; 类型: &nbsp; 数组 &nbsp; 二分查找 </b>

<br />

##### &nbsp;&nbsp;&nbsp; 给定一个按照升序排列的整数数组<b style="color:firebrick"> nums </b>，和一个目标值<b style="color:firebrick"> target </b>。找出给定目标值在数组中的开始位置和结束位置。

##### &nbsp;&nbsp;&nbsp; 你的算法时间复杂度必须是<b style="color:firebrick"> O(log n) </b> 级别。

##### &nbsp;&nbsp;&nbsp; 如果数组中不存在目标值，返回<b style="color:firebrick"> [-1, -1] </b>。

<br />

## **示例:**

#### 示例1:

>输入: nums = [5,7,7,8,8,10], target = 8

>输出: [3,4]

#### 示例2:

>输入: nums = [5,7,7,8,8,10], target = 6

>输出: [-1,-1]

<br />

## **分析:**

这道题比较简单，利用二分查找减少程序的运行时间是关键;

还可以增加if语句对low和high进行判断，减少程序的运行时间。

<br />

## **题解:**

```C++
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        std::vector<int> result;
        int low = 0;
        int high = nums.size() - 1;
        int middle ;
        while (low <= high){
            middle = (low + high)/2;

            //下面两个if语句用来减少程序的运行时间
            //若刚好最后一个或第一个是target，可以直接向前或向后进行遍历查找最大最小下标
            if(target == nums[low]){
                int i = low;
                while(nums[i] == nums[i+1]){
                    ++i;
                }
                result.push_back(low);
                result.push_back(i);
                return result;
            }
            if(target == nums[high]){
                int i = high;
                while(nums[i] == nums[i-1]){
                    --i;
                }
                result.push_back(i);
                result.push_back(high);
                return result;
            }

            //二分查找，当target == nums[middle]时，向前后分别进行遍历查找target的最小最大下标
            if(target == nums[middle]){
                int i = middle , j = middle;
                while(nums[i] == nums[i-1] || nums[j] == nums[j+1]){
                    if(nums[i] == nums[i-1] ) --i;
                    if(nums[j] == nums[j+1]) ++j;
                }
                result.push_back(i);
                result.push_back(j);
                return result;
            }
            if(target > nums[middle]){
                low = middle + 1;
            }
            else{
                high = middle - 1;
            }
            }
        return {-1,-1};
    }
};
```








